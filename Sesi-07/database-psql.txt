DATABASE

Introduction

Database:
	Komponen utama penyusun suatu app. 
	Terdiri dari sekumpulan data, tersimpan secara sistematis.

ada banyak jenis database, tapi yang paling sering digunakan adalah
	Relational Database dan Non-relational database.


Relational Database
	Pada Relational Database, data disimpan dalam sebuah skema yang ditampilkan seperti tabel.
	Setiap data pada relational database diidentifikasi dengan menggunakan key atau primary key.
	Untuk memanipulasi data pada relational database, digunakan bahasa Structured Query Language (SQL)
	Relational database disebut juga dengan SQL database.

	Contoh Relational Database
	>MySQL
	>MariaDB
	>PostgreSQL
		>memungkinkan user untuk mendefinisikan SQL-nya sendiri, terutama pembuatan func.
		>https://www.postgresql.org
		>untuk mengelola postgreSQL, bisa melalui console atau GUI ==> pgAdmin
		>https://www.pgadmin.org/
	>SQL server
	>Oracle
=======================================================================================================================================================================

Create Database melalui pgAdmin
	>login/masuk di pgAdmin
	>klik servers
	>masukkan password postgreSQL mu untuk mengakses database postgres
	>klik kanan Database
	>Create, Database, masukkan nama database (contoh db_go), save
	>klik ">" pada db_go, >schemas, klik >public, klik kanan pada tables, pilih Query Tool
	>Ketik

		CREATE TABLE employees (
			id SERIAL PRIMARY KEY,
			full_name varchar(50) NOT NULL,
			email TEXT UNIQUE NOT NULL,
			age INT NOT NULL,
			division varchar(20) NOT NULL
		);

	>Database bernama employees terbuat.
	>Di cek di >Tables, klim kanan employees, pilih view/editdata, all rows.
	>akan terlihat semacam tabel, yang masih kosong.
=======================================================================================================================================================================

Installing Sql Driver
	Kita akan menggunakan package database/sql dengan mengintegrasikannya dengan sebuah sql driver.
	Karena kita akan menggunakan database PostgreSQL, maka kita perlu menginstall driver dari PostgreSQL.

		>buat go.mod
		>jalankan perintah	go get -u github.com/lib/pq
		>pada kodingan, import "github.com/lib/pq"


	Contoh, 

			package main
	
			import (
				"database/sql"
				"fmt"
		
				_ "github.com/lib/pq"
				//ada _ karena kita hanya meregistrasi driver Postgresql
			)

	Kita memberikan _ saat mengimport driver postgresql. 
	Hal ini dilakukan karena kita tidak akan menggunakan syntax apapun dari driver.
	Kita hanya meregistrasi saja, agar package database/sql mengetahui driver jenis apa yang kita gunakan.
=======================================================================================================================================================================

Connecting to Database #1
	>Buat variabel global berupa konstanta yang kita gunakan untuk menyimpan seluruh informasi dari postgres.
	seperti user, port, password, dll.

	Contoh,

			const (
				host     = "localhost"
				port     = 5432
				user     = "postgres"
				password = "postgres"
				dbname   = "db_go"
			)
	
		user dan password menyesuaikan saat pertamakali install postgreSQL

	
	>Kita buat juga variabel db dan err.

			var (
				db  *sql.DB
				err error
			)

	db memiliki tipe data pointer dari struct sql.DB, yang nantinya akan kita reassign dengan object dari sql.DB pada saat membangun koneksi pada func main.
	err memiliki tipe data error.

	>Ketika kodingan2 diatas digabungkan

			package main

			import (
				"database/sql"
				"fmt"

				_ "github.com/lib/pq"
			)

			const (
				host     = "localhost"
				port     = 5432
				user     = "postgres"
				password = "Dita2710"
				dbname   = "db_go"
			)

			var (
				db  *sql.DB
				err error
			)

======================================================================================================================================================================

Connecting to Database #2

	pada func main,

	func main() {
		psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
			"password=%s dbname=%s sslmode=disable",
			host, port, user, password, dbname)

		//psqlInfo menggabungkan seluruh data postgreSQL menjadi string panjang.
		
		db, err = sql.Open("postgres", psqlInfo)
		//function Open yang berasal daripackage database/sql, menerima 2 parameter.
		//parameter 1 berupa nama driver yang digunakan ("postgres").
		//parameter 2 berupa string, yang mengandung informasi tentang bagaimana cara database/sql membangun koneksinya kepada database, sesuai dengan driver yang kita gunakan.
		//function Open mengembalikan nilai berupa pointer dari struct sql.DB, struct tersebut memiliki method Ping.
		//function Open berfungsi untuk memvalidasi argumen yang diberikan.
		//anggap sebagai proses login.
	
		if err != nil {
			panic(err)
		}
		defer db.Close()
		//kalau error, close.
	
		err = db.Ping()
		if err != nil {
			panic(err)
		}
		//dengan memanggil method Ping, kita dapat membangun koneksi ke database
		//sekaligus memeriksa jika string panjang psqlInfo 100%valid
	
		fmt.Println("Successfully connected to database")
	}

=======================================================================================================================================================================

Create Data
	Kita akan mencoba membuat data employee melalui package database/sql.

	>Buat struct dengan field sesuai dengan database yang telah kita buat.
		type Employee struct {
			ID        int
			Full_name string
			Email     string
			Age       int
			Division  string
		}

	>Buat func CreateEmployee()

		func CreateEmployee() {
			var employee = Employee{}

			sqlStatement := `
			INSERT INTO employees (full_name, email, age, division)
			VALUES ($1, $2, $3, $4)
			returning *
			`
			//sqlStatement berisi sebuah statement untuk melakukan "create data" pada database.
			//ingat saat baru membuat database, mirip seperti itu.
			//$1,$2,... merupakan representasi dari nilai-nilai yang akan dimasukan nantinya.
			//"returning *" memiliki arti kita ingin mendapat nilai-nilai dari seluruh field yang berasal dari data yang baru dibuat.

			err = db.QueryRow(sqlStatement, "Airell Jordan", "airell@mail.com", 23, "IT").
				Scan(&employee.ID, &employee.Full_name, &employee.Email, &employee.Age, &employee.Division)
			//method QueryRow digunakan untuk mengeksekusi query sql.
			//karena sqlStatement bertujuan untuk create data, maka QueryRow berfungsi untuk membuat data baru dengan nilai yang kita berikan pada parameter 2.
			//parameter ke-2 ini merupakan parameter variadic, dan niilai2 yang kita berikan adalah nilai-nilai yang akan mereplace statement yang kita buat pada VALUES ($1, $2,..)
			//method QueryRow kita chain dengan method Scan.
			//hal ini dilakukan agar kita dapat mendapatkan nilai-nilai balikan dari statement yang telah kita buat.
			//nilai-nilai tersebut akan kita simpan dalam field-field dari variabel employee (var employee Employee{})

			if err != nil {
				panic(err)
			}
	
			fmt.Printf("New Employee Data : %+v\n", employee)

		}

	>Panggil function CreateEmployee yang sudah dibuat, dalam func main

		func main() {
			psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
				"password=%s dbname=%s sslmode=disable",
				host, port, user, password, dbname)

			db, err = sql.Open("postgres", psqlInfo)

			if err != nil {
				panic(err)
			}
			defer db.Close()

			err = db.Ping()
			if err != nil {
				panic(err)
			}

			fmt.Println("Successfully connected to database")

			CreateEmployee()						// <========= yang ini
		}
	
	> go run main.go
		Terminal:
		Successfully connected to database
		New Employee Data : {ID:1 Full_name:Airell Jordan Email:airell@mail.com Age:23 Division:IT}

	>pada pgAdmin, klik kanan pada >employee (database yang kita buat diawal), pilih view/edit data, pilih all rows
	>akan terlihat tabel yang sebelumnya kosong, sudah terisi.
=======================================================================================================================================================================

Get Data
	Kita akan mencoba mendapatkan data-data employee yang telah dibuat

	>Buat function GetEmployees

		func GetEmployees() {
			var results = []Employee{}

			sqlStatement := `SELECT * from employees`

			rows, err := db.Query(sqlStatement)
			//method Query biasa digunakan untuk mendapatkan banyak data dari suatu table pada database
			//method ini dapat mengembalikan satu atau lebih rows dari suatu table pada database.
			//rows harus ditutup dengan method Close

			if err != nil {
				panic(err)
			}
			defer rows.Close()

			for rows.Next() {
				//kita melakukan looping sebanyak data yang kita dapatkan dengan acuan rows.Next.
				//rows.Next akan menghasilkan nilai true selama datanya masih ada.
				//jika sudah tidak ada, maka akan me-return false, dan looping terhenti.

				var employee = Employee{}

				err = rows.Scan(&employee.ID, &employee.Full_name, &employee.Email, &employee.Age, &employee.Division)
				//Scan dilakukan agar kita dapat mendapatkan nilai-nilai balikan dari statement yang telah kita buat.

				if err != nil {
					panic(err)
				}

				results = append(results, employee)
				//setelah proses scan untuk satu row selesai, data dari row tersebut akan kita masukkan dalam variabel results.
		
			}

	>Panggil function GetEmployees pada func main

		func main() {
			psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
				"password=%s dbname=%s sslmode=disable",
				host, port, user, password, dbname)

			db, err = sql.Open("postgres", psqlInfo)

			if err != nil {
				panic(err)
			}
			defer db.Close()

			err = db.Ping()
			if err != nil {
				panic(err)
			}

			fmt.Println("Successfully connected to database")

			GetEmployees()						// <========= yang ini
		}

	>go run main.go
		Terminal:
		Successfully connected to database
		Employee datas: [{1 Airell Jordan airell@mail.com 23 IT}]
=======================================================================================================================================================================

Update Data
	Kita akan mencoba meng-update data yang kita buat.

	>Buat function UpdateEmployee

		func UpdateEmployee() {
			sqlStatement := `
			UPDATE employees
			SET full_name = $2, email = $3, division = $4, age = $5
			WHERE id = $1;`
			res, err := db.Exec(sqlStatement, 1, "Airell Jordan Hidayat", "airellhidayat@gmail.com", "CurDevs", 24)
			//kita dapat menggunakan method QueryRow untuk mengupdate data, namun dianjurkan menggunakan method Exec untuk proses insert, update, dan delete.
			//dengan method Exec, kita tidak mendapatkan data yang baru saja diupdate maupun dibuat.
			//kita dapat menggunakan method RowsAffected untuk mengetahui jumlah row atau data yang baru diupdate.

			if err != nil {
				panic(err)
			}

			count, err := res.RowsAffected()
			//method RowsAffected didapatkan dari interface sql.Result yang merupakan nilai return dari method Exec.
	
			if err != nil {
				panic(err)
			}

			fmt.Println("Update data amount:", count)
		}

	>Panggil function UpdateEmployee pada func main

		func main() {
			psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
				"password=%s dbname=%s sslmode=disable",
				host, port, user, password, dbname)

			db, err = sql.Open("postgres", psqlInfo)

			if err != nil {
				panic(err)
			}
			defer db.Close()

			err = db.Ping()
			if err != nil {
				panic(err)
			}

			fmt.Println("Successfully connected to database")

			UpdateEmployee()						// <========= yang ini
		}
	
	>go run main.go
		Terminal:
		Successfully connected to database
		Update data amount: 1

	>Lihat di pgAdmin. view, all rows.
=======================================================================================================================================================================

Delete Data
	Kita akan mencoba menghapus data employee.

	>Buat function DeleteEmployee

		func DeleteEmployee() {
			sqlStatement := `
			DELETE from employees
			WHERE id = $1;
			`

			res, err := db.Exec(sqlStatement, 1)
			if err != nil {
				panic(err)
			}
			count, err := res.RowsAffected()
			if err != nil {
				panic(err)
			}
			fmt.Println("Deleted data amount:", count)
		}

	>Panggil function DeleteEmployee pada func main
		
		func main() {
			psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+
				"password=%s dbname=%s sslmode=disable",
				host, port, user, password, dbname)

			db, err = sql.Open("postgres", psqlInfo)

			if err != nil {
				panic(err)
			}
			defer db.Close()

			err = db.Ping()
			if err != nil {
				panic(err)
			}

			fmt.Println("Successfully connected to database")

			DeleteEmployee()						// <========= yang ini
		}

	>go run main.go
		Terminal:
		Successfully connected to database
		Deleted data amount: 1

	>Lihat pgAdmin
	

