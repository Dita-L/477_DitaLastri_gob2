STRING IN DEPTH

Tipe data string dalam Go terbentuk dari kumpulan tipe data byte (uint8), yang kita  sebut slice of bytes.
	string == slice of bytes

Ketika kita melakukan indexing terhadap string, maka kita akan mendapat nilai representasi dari byte nya.
	nilai representasi == ASCII Code == byte == uint8


	Contoh
		package main

		import "fmt"

		func main() {
			city := "jakarta"

			for i := 0; i < len(city); i++ {
				fmt.Printf("index: %d, byte: %d\n", i, city[i])
			}
		}

		Output:
			index: 0, byte: 106		==== j
			index: 1, byte: 97		==== a
			index: 2, byte: 107		==== k
			index: 3, byte: 97		==== a
			index: 4, byte: 114		==== r
			index: 5, byte: 116		==== t
			index: 6, byte: 97		==== a

Masing-masing nilai ASCII merepresentasikan masing-masing huruf.


Kita dapat membuat slice dengan tipe data byte, kemudian membentuk string menggunakan fungsi "string()"

		var kota []byte = []byte{106, 97, 107, 97, 114, 116, 97}
		fmt.Println(kota)
		fmt.Println(string(kota))

		Output:
			[106 97 107 97 114 116 97]
			jakarta


Ketika kita ingin mendapatkan panjang karakter dengan menggunakan function "len()", kita tidak mendapatkan panjang dari string berdasarkan karakternya, namun kita mendapatkan jumlah byte pada string.

		str1 := "makan"
		str2 := "mânca"

		fmt.Printf("str1 byte length = %d\n", len(str1))
		fmt.Printf("str2 byte length = %d\n", len(str2))

		Output:
			str1 byte length = 5
			str2 byte length = 6 		=====> Karakter â memakan 2 byte


Ketika kita hendak mencari jumlah karakter nya, dan bukan jumlah bytenya, maka kita perlu merubah string tersebut menjadi rune terlebih dahulu.
Tipe data rune merupakan tipe data alias dari int32.
Kita dapat menggunakan function RuneCountInString dari package utf8 untuk merubah string menjadi rune sekaligus mencari panjang karakternya.

		fmt.Printf("str2 byte length = %d\n", utf8.RuneCountInString(str2))

		Output:
			str2 byte length = 5

Looping pada string

		str1 := "makan"
		fmt.Printf("str1 byte length = %d\n", len(str1))
		
		for i, v := range str1 {
			fmt.Printf("indeks: %d, chara: %s\n", i, v)
		}
	
		Output:
			indeks: 0, chara: %!s(int32=109)
			indeks: 1, chara: %!s(int32=97)
			indeks: 2, chara: %!s(int32=107)
			indeks: 3, chara: %!s(int32=97)
			indeks: 4, chara: %!s(int32=110)

	Sudah jelas salahnya kan? wkwk.

		for i, v := range str1 {
			fmt.Printf("indeks: %d, chara: %d\n", i, v)
		}

		output:
			indeks: 0, chara: 109
			indeks: 1, chara: 97
			indeks: 2, chara: 107
			indeks: 3, chara: 97
			indeks: 4, chara: 110

	Tapi maunya karakter

		for i, v := range str1 {
			fmt.Printf("indeks: %d, chara: %s\n", i, string(v))
		}

		Output: 
			indeks: 0, chara: m
			indeks: 1, chara: a
			indeks: 2, chara: k
			indeks: 3, chara: a
			indeks: 4, chara: n


	Contoh lain

		str2 := "mânca"

		for i, v := range str2 {
			fmt.Printf("indeks: %d, chara: %s\n", i, string(v))
		}

		Output:
			indeks: 0, chara: m
			indeks: 1, chara: â
			indeks: 3, chara: n
			indeks: 4, chara: c
			indeks: 5, chara: a

		Perhatikan bahwa indeks 2 di-skip. itu karena karakter â memakan 2 byte.


