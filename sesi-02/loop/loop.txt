LOOPING

Looping atau perulangan merupakan suatu proses berulang yang dimana proses tersebut akan berhenti jika memenuhi suatu kondisi.
Bahasa Go hanya memiliki satu looping yaitu looping dengan menggunakan keyword "for" atau yang kitakenal dengan sebutan "for loop".

		package fmt

		import "fmt"

		func main() {		

			for i := 0; i < 3; i++ {
				fmt.Println("angka", i)
			}
		}

		output:
			angka 0
			angka 1
			angka 2

Pastikan saat membuat loop jangan sampai membuat infinity loop. hal itu akan membuat program crash.

Contoh tadi adalah contoh pertama penggunaan "for".

		for i := 0; i < 3; i++ {
			fmt.Println("angka", i)
		}

Contoh ke-2 :

		var i = 0

		for i < 3 {
			fmt.Println("angka", i)
			i++
		}

		output:
			angka 0
			angka 1
			angka 2

Contoh ke-3:

		var i = 0

		for {
			fmt.Println("angka", i)
			i++

			if i == 3 {
				break
			}
		}


		output:
			angka 0
			angka 1
			angka 2


Penggunaan "break" dan "continue" keywords

		for i := 1; i <= 10; i++ {
			if i%2 == 1 {
				continue
			}

			if i > 8 {
				break
			}

			fmt.Println("angka", i)
		}

	Pada looping di atas, terdapat dua kondisional yang dimana pada kondisional pertama digunakan untuk memeriksa jika variable i memiliki nilai ganjil, maka proses loopingnya dipaksa berlanjut dan akan mengacuhkan syntax yang ada dibawah keyword continue (pada kasus kita sekarang berarti kondisional kedua dan fungsi fmt.Println pada looping dibawah).
	Lalu pada kondisional kedua digunakan untuk memeriksa jika variable i sudah memiliki nilai diatas angka 8, makakeyword break akan terpanggil dan proses looping akan berhenti.
		Output:
			angka 2
			angka 4
			angka 6
			angka 8

Nested Looping (Loop bersarang)
	Nested looping atau looping bersarang adalah suatu proses looping yang memiliki suatu proses looping di dalamnya.

		for a := 0; a < 5; a++ {
			fmt.Println("Perulangan - ", a+1)

			for j := 0; j < 5; j++ {
				fmt.Print(j, " ")
			}
	
			fmt.Println("\n")
		}

		Output:
			Perulangan -  1
			0 1 2 3 4 
	
			Perulangan -  2
			0 1 2 3 4
	
			Perulangan -  3
			0 1 2 3 4 
	
			Perulangan -  4
			0 1 2 3 4
	
			Perulangan -  5
			0 1 2 3 4

Looping Berlabel
	Pada looping bersarang, keyword break dan continue akan berlaku pada blok perulangan dimana ia digunakan saja.
	Ada cara agar kedua keyword ini bisa tertuju pada perulangan terluar atau perulangan tertentu, yaitu dengan memanfaatkan teknik pemberian label.
		
	Contoh:

		outerloop:
			for i := 0; i < 3; i++ {
				fmt.Println("Perulangan - ", i+1)

				for j := 0; j < 3; j++ {
					if i == 2 {
						break outerloop
					}
					fmt.Print(j, " ")
				}
				fmt.Print("\n")
			}

		Output:
		Perulangan -  1
		0 1 2
		Perulangan -  2
		0 1 2
		Perulangan -  3


	Perhatikan hasil dari looping pertama, seluruh looping pada perulangan ketiga terhenti karena terdapat sebuah kondisional pada proses looping kedua,
	yang dimana jika variable i sudah memiliki nilai dengan angka sama dengan 2, maka looping pertama atau looping terluar akan dihentikan atau sama saja dengan seluruh proses looping terhenti.

