ERROR

Error merupakan sebuah tipe data pada bahasa Go yang digunakan untuk me-return
sebuah error jika ada erroe yang terjadi. Umumnya nilai error di-return pada 
posisi terakhir dari nilai-nilai return sebuah function.

strconv.Atoi ==== digunakan untuk mengkonversi string menjadi int.

package main

import (
	"fmt"
	"strconv"
)

func main() {
	var number int
	var err error

	number, err = strconv.Atoi("123GHIJ") 
	// karena ada huruf, pasti error
	// error tersebut yang akan ditampung variabel "err"

	if err == nil {
		fmt.Println(number)
	} else {
		fmt.Println(err.Error())
		//menggunakan method Error untuk menampilkan pesan jika terjadi sebuah error. 
		//Method Error berasal dari tipe data error.
		
		//Tapi pakai fmt.Println(err) outputnya sama aja. kenapa?
	}

}

Output:

strconv.Atoi: parsing "123GHIJ": invalid syntax

==================================================================================

package main

import (
	"fmt"
	"strconv"
)

func main() {
	var number int
	var err error

	number, err = strconv.Atoi("12345")
	//pasti tidak error

	if err == nil {
		fmt.Println(number)
	} else {
		fmt.Println(err.Error())
		fmt.Println(err)
	}

}

Output :

12345

==================================================================================

Custom Error

Kita dapat membuat pesan error sendiri dengan menggunakan method New, milik tipe data error.

fmt.Scanln digunakan untuk menangkap input yang kita ketik pada terminal.


package main

import (
	"errors"
	"fmt"
)

func main() {
	var password string

	fmt.Scanln(&password)

	if valid, err := validPassword(password); err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(valid)
	}
}

func validPassword(password string) (string, error) {
	pl := len(password)

	if pl < 5 {
		return "", errors.New("password has to have more than 4 characters")
	}
	return "Valid Password", nil
}


Output1:
hgjf,ydu
Valid Password

Output2:
yts
password has to have more than 4 characters

=================================================================================

PANIC

Panic digunakan untuk menampilkan stack trace error (?) sekaligus menghentikan
flow goroutine. karena main() juga merupakan goroutine, maka behaviour yang 
sama juga berlaku.

Setelah ada panic, proses akan terhenti, kecuali proses yang sudah di-defer
sebelumnya (akan muncul sebelum panic error).


package main

import (
	"errors"
	"fmt"
)

func main() {
	var password string

	fmt.Scanln(&password)

	if valid, err := validPassword(password); err != nil {
		//fmt.Println(err)
		panic(err)
	} else {
		fmt.Println(valid)
	}

}

func validPassword(password string) (string, error) {
	pl := len(password)

	if pl < 5 {
		return "", errors.New("Password has to have more than 4 characters")
	}

	return "Valid password", nil
}


Output:

dff
panic: Password has to have more than 4 characters

goroutine 1 [running]:
main.main()
        D:/New folder/GoLang/go/panic.go:15 +0x112
exit status 2

itu adalah stack error, heboh kan.

=================================================================================

RECOVER 

Function recover() digunakan untuk menangkap error yang terjadi pada sebuah goroutine.

package main

import (
	"errors"
	"fmt"
)

func main() {
	defer catchErr()
	//harus menggunakan defer

	var password string

	fmt.Scanln(&password)

	if valid, err := validPassword(password); err != nil {
		//fmt.Println(err)
		panic(err)
	} else {
		fmt.Println(valid)
	}

}

func validPassword(password string) (string, error) {
	pl := len(password)

	if pl < 5 {
		return "", errors.New("Password has to have more than 4 characters")
	}

	return "Valid password", nil
}

func catchErr() {
	if r := recover(); r != nil {
		fmt.Println("Error occured:", r)
	} else {
		fmt.Println("Application running perfectly")
	}

}

Output:
hj 
Error occured: Password has to have more than 4 characters

pesan dari panic error tidak ditampilkan karena telah di tangkap menggunakan function
recover yang terdapat didalam function catchErr.

